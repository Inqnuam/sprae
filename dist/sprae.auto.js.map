{
  "version": 3,
  "sources": ["../signal.js", "../store.js", "../core.js", "../node_modules/ulive/dist/ulive.es.js", "../directive/if.js", "../directive/each.js", "../directive/ref.js", "../directive/with.js", "../directive/html.js", "../directive/text.js", "../directive/class.js", "../directive/style.js", "../directive/default.js", "../directive/value.js", "../directive/fx.js", "../sprae.js", "../sprae.auto.js"],
  "sourcesContent": ["// signals adapter - allows switching signals implementation and not depend on core\nexport let signal, effect, untracked, batch, computed;\n\nexport function use(s) {\n  signal = s.signal\n  effect = s.effect\n  computed = s.computed\n  batch = s.batch || (fn => fn())\n  untracked = s.untracked || batch\n}\n", "// signals-based proxy\nimport { signal, computed, effect, batch, untracked } from './signal.js'\n\nexport const _signals = Symbol('signals'), _change = Symbol('length');\n\n// object store is not lazy\nexport default function store(values, parent) {\n  if (!values) return values\n\n  // ignore existing state as argument\n  if (values[_signals]) return values;\n\n  // redirect for optimized array store\n  if (Array.isArray(values)) return list(values)\n\n  // ignore non-objects\n  if (values.constructor !== Object) return values;\n\n  // NOTE: if you decide to unlazy values, think about large arrays - init upfront can be costly\n  let signals = { ...parent?.[_signals] }, _len = signal(Object.values(values).length)\n\n  // proxy conducts prop access to signals\n  const state = new Proxy(signals, {\n    get: (_, key) => key === _change ? _len : key === _signals ? signals : (signals[key]?.valueOf()),\n    set: (_, key, v, s) => (s = signals[key], set(signals, key, v), s ?? (++_len.value), 1), // bump length for new signal\n    deleteProperty: (_, key) => (signals[key] && (del(signals, key), _len.value--), 1),\n    ownKeys() {\n      // subscribe to length when object is spread\n      _len.value\n      return Reflect.ownKeys(signals);\n    },\n  })\n\n  // init signals for values\n  for (let key in values) {\n    const desc = Object.getOwnPropertyDescriptor(values, key)\n\n    // getter turns into computed\n    if (desc?.get) {\n      // stash setter\n      (signals[key] = computed(desc.get.bind(state)))._set = desc.set?.bind(state);\n    }\n    else {\n      // init blank signal - make sure we don't take prototype one\n      signals[key] = undefined\n      set(signals, key, values[key]);\n    }\n  }\n\n  return state\n}\n\n// length changing methods\nconst mut = { push: 1, pop: 1, shift: 1, unshift: 1, splice: 1 }\n\n// array store - signals are lazy since arrays can be very large & expensive\nexport function list(values) {\n  // track last accessed property to find out if .length was directly accessed from expression or via .push/etc method\n  let lastProp\n\n  // ignore existing state as argument\n  if (values[_signals]) return values;\n\n  // .length signal is stored separately, since it cannot be replaced on array\n  let _len = signal(values.length),\n    // gotta fill with null since proto methods like .reduce may fail\n    signals = Array(values.length).fill();\n\n  // proxy conducts prop access to signals\n  const state = new Proxy(signals, {\n    get(_, key) {\n      // covers Symbol.isConcatSpreadable etc.\n      if (typeof key === 'symbol') return key === _change ? _len : key === _signals ? signals : signals[key]\n\n      // console.log('get', key)\n      // if .length is read within .push/etc - peek signal to avoid recursive subscription\n      if (key === 'length') return mut[lastProp] ? _len.peek() : _len.value;\n\n      lastProp = key;\n\n      if (signals[key]) return signals[key].valueOf()\n\n      // I hope reading values here won't diverge from signals\n      if (key < signals.length) return (signals[key] = signal(store(values[key]))).value\n    },\n\n    set(_, key, v) {\n      // console.log('set', key, v)\n      // .length\n      if (key === 'length') {\n        // force cleaning up tail\n        for (let i = v, l = signals.length; i < l; i++) delete state[i]\n        // .length = N directly\n        _len.value = signals.length = v;\n        return true\n      }\n\n      set(signals, key, v)\n\n      // force changing length, if eg. a=[]; a[1]=1 - need to come after setting the item\n      if (key >= _len.peek()) _len.value = signals.length = Number(key) + 1\n\n      return true\n    },\n\n    deleteProperty: (_, key) => (signals[key] && del(signals, key), 1),\n\n  })\n\n  return state\n}\n\n// set/update signal value\nfunction set(signals, key, v) {\n  let s = signals[key]\n\n  // untracked\n  if (key[0] === '_') signals[key] = v\n  // new property\n  else if (!s) {\n    // preserve signal value as is\n    signals[key] = s = v?.peek ? v : signal(store(v))\n  }\n  // skip unchanged (although can be handled by last condition - we skip a few checks this way)\n  else if (v === s.peek());\n  // stashed _set for value with getter/setter\n  else if (s._set) s._set(v)\n  // patch array\n  else if (Array.isArray(v) && Array.isArray(s.peek())) {\n    const cur = s.peek()\n    // if we update plain array (stored in signal) - take over value instead\n    if (cur[_change]) untracked(() => {\n      batch(() => {\n        let i = 0, l = v.length;\n        for (; i < l; i++) cur[i] = v[i]\n        cur.length = l // forces deleting tail signals\n      })\n    })\n    else {\n      s.value = v\n    }\n  }\n  // .x = y\n  else {\n    s.value = store(v)\n  }\n}\n\n// delete signal\nfunction del(signals, key) {\n  const s = signals[key], del = s[Symbol.dispose]\n  if (del) delete s[Symbol.dispose]\n  delete signals[key]\n  del?.()\n}\n", "import { use } from \"./signal.js\";\nimport store, { _signals } from './store.js';\n\n// polyfill\nconst _dispose = (Symbol.dispose ||= Symbol(\"dispose\"));\n\n// reserved directives - order matters!\nexport const directive = {};\n\n// every element that's in cache === directly spraed and un subsequent sprae is just updated (like each)\nexport const memo = new WeakMap();\n\n// sprae element: apply directives\nexport default function sprae(el, values) {\n  // text nodes, comments etc\n  if (!el?.childNodes) return\n\n  // repeated call can be caused by :each with new objects with old keys needs an update\n  if (memo.has(el)) {\n    // we rewrite signals instead of update, because user should have what he provided\n    return Object.assign(memo.get(el), values)\n  }\n\n  // take over existing state instead of creating clone\n  const state = store(values || {}), disposes = []\n\n  init(el);\n\n  // if element was spraed by :with or :each instruction - skip, otherwise save\n  if (!memo.has(el)) memo.set(el, state);\n\n  // disposer unspraes all internal elements\n  el[_dispose] = () => {\n    while (disposes.length) disposes.pop()();\n    memo.delete(el);\n  }\n\n  return state;\n\n  function init(el, parent = el.parentNode) {\n    if (!el.childNodes) return // ignore text nodes, comments etc\n\n    // init generic-name attributes second\n    for (let i = 0; i < el.attributes?.length;) {\n      let attr = el.attributes[i];\n\n      if (attr.name[0] === ':') {\n        el.removeAttribute(attr.name);\n\n        // multiple attributes like :id:for=\"\"\n        let names = attr.name.slice(1).split(':')\n\n        // NOTE: secondary directives don't stop flow nor extend state, so no need to check\n        for (let name of names) {\n          let dir = directive[name] || directive.default\n          let evaluate = (dir.parse || parse)(attr.value)\n          let dispose = dir(el, evaluate, state, name);\n          if (dispose) disposes.push(dispose);\n        }\n\n        // stop if element was spraed by internal directive\n        if (memo.has(el)) return el[_dispose] && disposes.push(el[_dispose])\n\n        // stop if element is skipped (detached) like in case of :if or :each\n        if (el.parentNode !== parent) return\n      } else i++;\n    }\n\n    for (let child of [...el.childNodes]) init(child, el);\n  };\n}\n\n\n// compiler\nconst evalMemo = {};\nexport const parse = (expr, dir, fn) => {\n  if (fn = evalMemo[expr = expr.trim()]) return fn\n\n  // static-time errors\n  try { fn = compile(expr) }\n  catch (e) { err(e, dir, expr) }\n\n  // runtime errors\n  return evalMemo[expr] = fn\n}\n\n// wrapped call\nexport const err = (e, dir, expr = '') => {\n  throw Object.assign(e, { message: `\u2234 ${e.message}\\n\\n${dir}${expr ? `=\"${expr}\"\\n\\n` : \"\"}`, expr })\n}\n\nexport let compile\n\n// configure signals/compile\n// it's more compact than using sprae.signal = signal etc.\nsprae.use = s => {\n  s.signal && use(s);\n  s.compile && (compile = s.compile);\n}\n\n\n// instantiated <template> fragment holder, like persisting fragment but with minimal API surface\nexport const frag = (tpl) => {\n  if (!tpl.nodeType) return tpl // existing tpl\n\n  let content = tpl.content.cloneNode(true),\n    attributes = [...tpl.attributes],\n    ref = document.createTextNode(''),\n    // ensure at least one node\n    childNodes = (content.append(ref), [...content.childNodes])\n\n  return {\n    childNodes,\n    content,\n    remove: () => content.append(...childNodes),\n    replaceWith(el) {\n      if (el === ref) return\n      ref.before(el)\n      content.append(...childNodes)\n    },\n    attributes,\n    removeAttribute(name) { attributes.splice(attributes.findIndex(a => a.name === name), 1) }\n  }\n}\n", "let current, batched;\r\n\r\nconst signal = (v, s, obs = new Set) => (\r\n  s = {\r\n    get value() {\r\n      current?.deps.push(obs.add(current));\r\n      return v\r\n    },\r\n    set value(val) {\r\n      if (val === v) return\r\n      v = val;\r\n      for (let sub of obs) batched ? batched.add(sub) : sub(); // notify effects\r\n    },\r\n    peek() { return v },\r\n  },\r\n  s.toJSON = s.then = s.toString = s.valueOf = () => s.value,\r\n  s\r\n),\r\n  effect = (fn, teardown, fx, deps) => (\r\n    fx = (prev) => {\r\n      teardown?.call?.();\r\n      prev = current, current = fx;\r\n      try { teardown = fn(); } finally { current = prev; }\r\n    },\r\n    deps = fx.deps = [],\r\n\r\n    fx(),\r\n    (dep) => { teardown?.call?.(); while (dep = deps.pop()) dep.delete(fx); }\r\n  ),\r\n  computed = (fn, s = signal(), c, e) => (\r\n    c = {\r\n      get value() {\r\n        e ||= effect(() => s.value = fn());\r\n        return s.value\r\n      },\r\n      peek: s.peek\r\n    },\r\n    c.toJSON = c.then = c.toString = c.valueOf = () => c.value,\r\n    c\r\n  ),\r\n  batch = (fn) => {\r\n    let fxs = batched;\r\n    if (!fxs) batched = new Set;\r\n    try { fn(); }\r\n    finally {\r\n      if (!fxs) {\r\n        fxs = batched;\r\n        batched = null;\r\n        for (const fx of fxs) fx();\r\n      }\r\n    }\r\n  },\r\n  untracked = (fn, prev, v) => (prev = current, current = null, v = fn(), current = prev, v);\n\nexport { batch, computed, effect, signal, untracked };\n", "import sprae, { directive, memo, frag } from \"../core.js\";\nimport { effect } from \"../signal.js\";\n\n// :if is interchangeable with :each depending on order, :if :each or :each :if have different meanings\n// as for :if :with - :if must init first, since it is lazy, to avoid initializing component ahead of time by :with\n// we consider :with={x} :if={x} case insignificant\nconst _prevIf = Symbol(\"if\");\ndirective.if = (el, evaluate, state) => {\n  let next = el.nextElementSibling,\n    holder = document.createTextNode(''),\n    curEl, ifEl, elseEl;\n\n  el.replaceWith(holder)\n\n  ifEl = el.content ? frag(el) : el\n  memo.set(ifEl, null) // mark all el as fake-spraed, because we have to sprae for real on insert\n\n  if (next?.hasAttribute(\":else\")) {\n    next.removeAttribute(\":else\");\n    // if next is :else :if - leave it for its own :if handler\n    if (!next.hasAttribute(\":if\")) next.remove(), elseEl = next.content ? frag(next) : next, memo.set(elseEl, null)\n  }\n\n  return effect(() => {\n    const newEl = evaluate(state) ? ifEl : el[_prevIf] ? null : elseEl;\n    if (next) next[_prevIf] = newEl === ifEl\n    if (curEl != newEl) {\n      curEl?.remove()\n      if (curEl = newEl) {\n        holder.before(curEl.content || curEl)\n        memo.get(curEl) === null && memo.delete(curEl) // remove fake memo to sprae as new\n        sprae(curEl, state)\n      }\n    }\n  });\n};\n", "import sprae, { directive, frag, parse } from \"../core.js\";\nimport store, { _change, _signals } from \"../store.js\";\nimport { effect, untracked, computed } from '../signal.js';\n\n\ndirective.each = (tpl, [itemVar, idxVar, evaluate], state) => {\n  // we need :if to be able to replace holder instead of tpl for :if :each case\n  const holder = (document.createTextNode(\"\"));\n  tpl.replaceWith(holder);\n\n  // we re-create items any time new items are produced\n  let cur, keys, prevl = 0\n\n  // separate computed effect reduces number of needed updates for the effect\n  const items = computed(() => {\n    keys = null\n    let items = evaluate(state)\n    if (typeof items === \"number\") items = Array.from({ length: items }, (_, i) => i + 1)\n    if (items?.constructor === Object) keys = Object.keys(items), items = Object.values(items)\n    return items || []\n  })\n\n  const update = () => {\n    // NOTE: untracked avoids rerendering full list whenever internal items or props change\n    untracked(() => {\n      let i = 0, newItems = items.value, newl = newItems.length\n\n      // plain array update, not store (signal with array) - updates full list\n      if (cur && !(cur[_change])) {\n        for (let s of cur[_signals] || []) { s[Symbol.dispose]() }\n        cur = null, prevl = 0\n      }\n\n      // delete\n      if (newl < prevl) {\n        cur.length = newl\n      }\n      // update, append, init\n      else {\n        // init\n        if (!cur) {\n          cur = newItems\n        }\n        // update\n        else {\n          for (; i < prevl; i++) {\n            cur[i] = newItems[i]\n          }\n        }\n\n        // append\n        for (; i < newl; i++) {\n          cur[i] = newItems[i]\n          let idx = i,\n            scope = store({\n              [itemVar]: cur[_signals]?.[idx] || cur[idx],\n              [idxVar]: keys ? keys[idx] : idx\n            }, state),\n            el = tpl.content ? frag(tpl) : tpl.cloneNode(true);\n\n          holder.before(el.content || el);\n          sprae(el, scope);\n\n          // signal/holder disposal removes element\n          ((cur[_signals] ||= [])[i] ||= {})[Symbol.dispose] = () => {\n            el[Symbol.dispose](), el.remove()\n          };\n        }\n      }\n\n      prevl = newl\n    })\n  }\n\n  let planned = 0\n  return effect(() => {\n    // subscribe to items change (.length) - we do it every time (not just on init) since preact unsubscribes unused signals\n    items.value[_change]?.value\n\n    // make first render immediately, debounce subsequent renders\n    if (!planned) {\n      update()\n      queueMicrotask(() => (planned && update(), planned = 0))\n    } else planned++\n  })\n}\n\n\n// redefine parser to exclude `[a in] b`\ndirective.each.parse = (expr) => {\n  let [leftSide, itemsExpr] = expr.split(/\\s+in\\s+/);\n  let [itemVar, idxVar = \"$\"] = leftSide.split(/\\s*,\\s*/);\n\n  return [itemVar, idxVar, parse(itemsExpr)]\n}\n", "import { directive } from \"../core.js\";\nimport { _change, _signals } from \"../store.js\";\n\n// ref must be last within primaries, since that must be skipped by :each, but before secondaries\ndirective.ref = (el, expr, state) => {\n  state[expr] = el\n}\n\ndirective.ref.parse = expr => expr\n", "import sprae, { directive } from \"../core.js\";\nimport store, { _signals } from '../store.js';\nimport { effect } from \"../signal.js\";\n\ndirective.with = (el, evaluate, rootState) => {\n  let state\n  return effect(() => {\n    let values = evaluate(rootState);\n    sprae(el, state ? values : state = store(values, rootState))\n  })\n};\n", "import sprae, { directive } from \"../core.js\";\n\ndirective.html = (el, evaluate, state) => {\n  let tpl = evaluate(state);\n\n  if (!tpl) return\n\n  let content = (tpl.content || tpl).cloneNode(true);\n  el.replaceChildren(content);\n  sprae(el, state);\n};\n", "import { directive, frag } from \"../core.js\";\nimport { effect } from \"../signal.js\";\n\n// set text content\ndirective.text = (el, evaluate, state) => {\n  // <template :text=\"a\"/> or previously initialized template\n  if (el.content) el.replaceWith(el = frag(el).childNodes[0])\n\n  return effect(() => {\n    let value = evaluate(state);\n    el.textContent = value == null ? \"\" : value;\n  });\n};\n", "import { directive } from \"../core.js\";\nimport { effect } from \"../signal.js\";\n\ndirective.class = (el, evaluate, state) => {\n  let cur = new Set\n  return effect(() => {\n    let v = evaluate(state);\n    let clsx = new Set;\n    if (v) {\n      if (typeof v === \"string\") v.split(' ').map(cls => clsx.add(cls));\n      else if (Array.isArray(v)) v.map(v => v && clsx.add(v));\n      else Object.entries(v).map(([k, v]) => v && clsx.add(k));\n    }\n    for (let cls of cur) if (clsx.has(cls)) clsx.delete(cls); else el.classList.remove(cls);\n    for (let cls of cur = clsx) el.classList.add(cls)\n  });\n};\n", "import { directive } from \"../core.js\";\nimport { effect } from \"../signal.js\";\n\ndirective.style = (el, evaluate, state) => {\n  let initStyle = el.getAttribute(\"style\");\n\n  return effect(() => {\n    let v = evaluate(state);\n    if (typeof v === \"string\") el.setAttribute(\"style\", initStyle + (initStyle.endsWith(';') ? '' : '; ') + v);\n    else {\n      if (initStyle) el.setAttribute(\"style\", initStyle);\n      for (let k in v) k[0] == '-' ? (el.style.setProperty(k, v[k])) : el.style[k] = v[k]\n    }\n  });\n};\n", "import { directive, err } from \"../core.js\";\nimport { effect } from \"../signal.js\";\n\n// set generic property directive\ndirective.default = (target, evaluate, state, name) => {\n  // simple prop\n  if (!name.startsWith('on')) return effect(() => {\n    let value = evaluate(state);\n    if (name) attr(target, name, value)\n    else for (let key in value) attr(target, dashcase(key), value[key]);\n  });\n\n  // bind event to a target\n  // NOTE: if you decide to remove chain of events, thing again - that's unique feature of sprae, don't diminish your own value.\n  // ona..onb\n  const ctxs = name.split('..').map(e => {\n    let ctx = { evt: '', target, test: () => true };\n    ctx.evt = (e.startsWith('on') ? e.slice(2) : e).replace(/\\.(\\w+)?-?([-\\w]+)?/g,\n      (match, mod, param = '') => (ctx.test = mods[mod]?.(ctx, ...param.split('-')) || ctx.test, '')\n    );\n    return ctx;\n  });\n\n  // single event\n  if (ctxs.length == 1) return effect(() => addListener(evaluate(state), ctxs[0]))\n\n  // events cycler\n  let startFn, nextFn, off, idx = 0\n  const nextListener = (fn) => {\n    off = addListener((e) => (\n      off(), nextFn = fn?.(e), (idx = ++idx % ctxs.length) ? nextListener(nextFn) : (startFn && nextListener(startFn))\n    ), ctxs[idx]);\n  }\n\n  return effect(() => (\n    startFn = evaluate(state),\n    !off && nextListener(startFn),\n    () => startFn = null // nil startFn to autodispose chain\n  ))\n\n  // add listener with the context\n  function addListener(fn, { evt, target, test, defer, stop, prevent, immediate, ...opts }) {\n    if (defer) fn = defer(fn)\n\n    const cb = (e) => {\n      try {\n        test(e) && (stop && (immediate ? e.stopImmediatePropagation() : e.stopPropagation()), prevent && e.preventDefault(), fn?.(e))\n      } catch (error) { err(error, `:on${evt}`, fn) }\n    };\n\n    target.addEventListener(evt, cb, opts)\n    return () => target.removeEventListener(evt, cb, opts)\n  };\n\n};\n\n// event modifiers\nconst mods = {\n  // actions\n  prevent(ctx) { ctx.prevent = true; },\n  stop(ctx) { ctx.stop = true; },\n  immediate(ctx) { ctx.immediate = true; },\n\n  // options\n  once(ctx) { ctx.once = true; },\n  passive(ctx) { ctx.passive = true; },\n  capture(ctx) { ctx.capture = true; },\n\n  // target\n  window(ctx) { ctx.target = window; },\n  document(ctx) { ctx.target = document; },\n\n  throttle(ctx, limit) { ctx.defer = (fn) => throttle(fn, limit ? Number(limit) || 0 : 108); },\n  debounce(ctx, wait) { ctx.defer = (fn) => debounce(fn, wait ? Number(wait) || 0 : 108); },\n\n  // test\n  outside: (ctx) => (e) => {\n    let target = ctx.target;\n    if (target.contains(e.target)) return false;\n    if (e.target.isConnected === false) return false;\n    if (target.offsetWidth < 1 && target.offsetHeight < 1) return false;\n    return true;\n  },\n  self: (ctx) => (e) => e.target === ctx.target,\n\n  // keyboard\n  ctrl: (_, ...param) => (e) => keys.ctrl(e) && param.every((p) => (keys[p] ? keys[p](e) : e.key === p)),\n  shift: (_, ...param) => (e) => keys.shift(e) && param.every((p) => (keys[p] ? keys[p](e) : e.key === p)),\n  alt: (_, ...param) => (e) => keys.alt(e) && param.every((p) => (keys[p] ? keys[p](e) : e.key === p)),\n  meta: (_, ...param) => (e) => keys.meta(e) && param.every((p) => (keys[p] ? keys[p](e) : e.key === p)),\n  // NOTE: we don't expose up/left/right/down as too verbose: can and better be handled/differentiated at once\n  arrow: () => keys.arrow,\n  enter: () => keys.enter,\n  esc: () => keys.esc,\n  tab: () => keys.tab,\n  space: () => keys.space,\n  delete: () => keys.delete,\n  digit: () => keys.digit,\n  letter: () => keys.letter,\n  char: () => keys.char,\n};\n\n// key testers\nconst keys = {\n  ctrl: (e) => e.ctrlKey || e.key === \"Control\" || e.key === \"Ctrl\",\n  shift: (e) => e.shiftKey || e.key === \"Shift\",\n  alt: (e) => e.altKey || e.key === \"Alt\",\n  meta: (e) => e.metaKey || e.key === \"Meta\" || e.key === \"Command\",\n  arrow: (e) => e.key.startsWith(\"Arrow\"),\n  enter: (e) => e.key === \"Enter\",\n  esc: (e) => e.key.startsWith(\"Esc\"),\n  tab: (e) => e.key === \"Tab\",\n  space: (e) => e.key === \"\u00A0\" || e.key === \"Space\" || e.key === \" \",\n  delete: (e) => e.key === \"Delete\" || e.key === \"Backspace\",\n  digit: (e) => /^\\d$/.test(e.key),\n  letter: (e) => /^\\p{L}$/gu.test(e.key),\n  char: (e) => /^\\S$/.test(e.key),\n};\n\n// set attr\nexport const attr = (el, name, v) => {\n  if (v == null || v === false) el.removeAttribute(name);\n  else el.setAttribute(name, v === true ? \"\" : typeof v === \"number\" || typeof v === \"string\" ? v : \"\");\n}\n\n// create delayed fns\nconst throttle = (fn, limit) => {\n  let pause, planned,\n    block = (e) => {\n      pause = true;\n      setTimeout(() => {\n        pause = false;\n        // if event happened during blocked time, it schedules call by the end\n        if (planned) return (planned = false), block(e), fn(e);\n      }, limit);\n    };\n  return (e) => {\n    if (pause) return (planned = true);\n    block(e);\n    return fn(e);\n  };\n};\n\nconst debounce = (fn, wait) => {\n  let timeout;\n  return (e) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => {\n      timeout = null;\n      fn(e);\n    }, wait);\n  };\n};\n\nexport const dashcase = (str) => {\n  return str.replace(/[A-Z\\u00C0-\\u00D6\\u00D8-\\u00DE]/g, (match, i) => (i?'-':'') + match.toLowerCase());\n}\n", "import { directive, parse } from \"../core.js\";\nimport { attr } from './default.js';\nimport { effect } from \"../signal.js\";\n\n// connect expr to element value\ndirective.value = (el, [getValue, setValue], state) => {\n  const update =\n    (el.type === \"text\" || el.type === \"\") ? (value) => el.setAttribute(\"value\", (el.value = value == null ? \"\" : value))\n      : (el.tagName === \"TEXTAREA\" || el.type === \"text\" || el.type === \"\") ? (value, from, to) =>\n      (\n        // we retain selection in input\n        (from = el.selectionStart),\n        (to = el.selectionEnd),\n        el.setAttribute(\"value\", (el.value = value == null ? \"\" : value)),\n        from && el.setSelectionRange(from, to)\n      )\n        : (el.type === \"checkbox\") ? (value) => (el.checked = value, attr(el, \"checked\", value))\n          : (el.type === \"select-one\") ? (value) => {\n            for (let option in el.options) option.removeAttribute(\"selected\");\n            el.value = value;\n            el.selectedOptions[0]?.setAttribute(\"selected\", \"\");\n          }\n            : (value) => (el.value = value);\n\n  // bind back\n  const handleChange = el.type === 'checkbox' ? e => setValue(state, el.checked) : e => setValue(state, el.value)\n  el.addEventListener('input', handleChange)\n  el.addEventListener('change', handleChange)\n\n  return effect(() => (update(getValue(state))));\n};\n\ndirective.value.parse = expr => {\n  let evaluate = [parse(expr)]\n  try {\n    // for values like `123 = arguments[1]`, `foo?.bar = arguments[1]`\n    evaluate.push(parse(`${expr}=arguments[1];`))\n  }\n  catch (e) { }\n  return evaluate\n}\n", "import { directive } from \"../core.js\";\nimport { effect } from \"../signal.js\";\n\ndirective.fx = (el, evaluate, state) => {\n  return effect(() => evaluate(state));\n};\n", "import sprae from './core.js'\n\nimport * as signals from 'ulive'\n\n// default directives\nimport './directive/if.js'\nimport './directive/each.js'\nimport './directive/ref.js'\nimport './directive/with.js'\nimport './directive/html.js'\nimport './directive/text.js'\nimport './directive/class.js'\nimport './directive/style.js'\nimport './directive/value.js'\nimport './directive/fx.js'\nimport './directive/default.js'\n\n// default signals\nsprae.use(signals)\n\n// default compiler (indirect new Function to avoid detector)\nsprae.use({ compile: expr => sprae.constructor(`with (arguments[0]) { return ${expr} };`) })\n\nexport default sprae", "import sprae from \"./sprae.js\";\n\n// standalone run\nif (typeof document != \"undefined\" && document?.currentScript) {\n    window.sprae = sprae\n    if (document.currentScript.hasAttribute('init')) sprae(document.documentElement);\n  }\n  "],
  "mappings": "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",
  "names": ["del", "el", "attr", "batch", "computed", "effect", "signal", "untracked", "keys", "items", "v", "target"]
}
